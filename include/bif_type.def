//             (id,              bif_type,     bro_type,     c_type,        c_type_smart,               accessor,                         accessor_smart,                   cast_smart,     constructor,                                ctor_smart)
DEFINE_BIF_TYPE(TYPE_ADDR,       "addr",       "addr",       "AddrVal*",    "IntrusivePtr<AddrVal>",    "%s->AsAddrVal()",                "%s",                             "<AddrVal>",    "IntrusivePtr{AdoptRef{}, %s}",             "std::move(%s)")
DEFINE_BIF_TYPE(TYPE_ANY,        "any",        "any",        "Val*",        "IntrusivePtr<Val>",        "%s",                             "%s",                             "",             "IntrusivePtr{AdoptRef{}, %s}",             "std::move(%s)")
DEFINE_BIF_TYPE(TYPE_BOOL,       "bool",       "bool",       "int",         "int",                      "%s->AsBool()",                   "%s->AsBool()",                   "",             "val_mgr->Bool(%s)",                        "val_mgr->Bool(%s)")
DEFINE_BIF_TYPE(TYPE_CONN_ID,    "conn_id",    "conn_id",    "Val*",        "IntrusivePtr<Val>",        "%s",                             "%s",                             "",             "IntrusivePtr{AdoptRef{}, %s}",             "std::move(%s)")
DEFINE_BIF_TYPE(TYPE_CONNECTION, "connection", "connection", "Connection*", "Connection*",              "%s->AsRecordVal()",              "%s->AsRecordVal()",              "",             "%s->UpdatedConnVal()",                     "%s->UpdatedConnVal()")
DEFINE_BIF_TYPE(TYPE_COUNT,      "count",      "count",      "bro_uint_t",  "bro_uint_t",               "%s->AsCount()",                  "%s->AsCount()",                  "",             "val_mgr->Count(%s)",                       "val_mgr->Count(%s)")
DEFINE_BIF_TYPE(TYPE_DOUBLE,     "double",     "double",     "double",      "double",                   "%s->AsDouble()",                 "%s->AsDouble()",                 "",             "make_intrusive<DoubleVal>(%s)",            "make_intrusive<DoubleVal>(%s)")
DEFINE_BIF_TYPE(TYPE_FILE,       "file",       "file",       "BroFile*",    "IntrusivePtr<Val>",        "%s->AsFile()",                   "%s",                             "",             "make_intrusive<Val>(IntrusivePtr{AdoptRef{}, %s})",    "std::move(%s)")
DEFINE_BIF_TYPE(TYPE_INT,        "int",        "int",        "bro_int_t",   "bro_int_t",                "%s->AsInt()",                    "%s->AsInt()",                    "",             "val_mgr->Int(%s)",                         "val_mgr->Int(%s)")
DEFINE_BIF_TYPE(TYPE_INTERVAL,   "interval",   "interval",   "double",      "double",                   "%s->AsInterval()",               "%s->AsInterval()",               "",             "make_intrusive<IntervalVal>(%s, Seconds)", "make_intrusive<IntervalVal>(%s, Seconds)")
DEFINE_BIF_TYPE(TYPE_PATTERN,    "pattern",    "pattern",    "RE_Matcher*", "IntrusivePtr<PatternVal>", "%s->AsPattern()",                "%s",                             "<PatternVal>", "make_intrusive<PatternVal>(%s)",           "std::move(%s)")
DEFINE_BIF_TYPE(TYPE_PORT,       "port",       "port",       "PortVal*",    "IntrusivePtr<PortVal>",    "%s->AsPortVal()",                "%s",                             "<PortVal>",    "IntrusivePtr{AdoptRef{}, %s}",             "std::move(%s)")
DEFINE_BIF_TYPE(TYPE_STRING,     "string",     "string",     "StringVal*",  "IntrusivePtr<StringVal>",  "%s->AsStringVal()",              "%s",                             "<StringVal>",  "IntrusivePtr{AdoptRef{}, %s}",             "std::move(%s)")
DEFINE_BIF_TYPE(TYPE_SUBNET,     "subnet",     "subnet",     "SubNetVal*",  "IntrusivePtr<SubNetVal>",  "%s->AsSubNetVal()",              "%s",                             "<SubNetVal>",  "IntrusivePtr{AdoptRef{}, %s}",             "std::move(%s)")
DEFINE_BIF_TYPE(TYPE_TIME,       "time",       "time",       "double",      "double",                   "%s->AsTime()",                   "%s->AsTime()",                   "",             "make_intrusive<TimeVal>(%s)",              "make_intrusive<TimeVal>(%s)")
DEFINE_BIF_TYPE(TYPE_OTHER,      "",           "",           "Val*",        "IntrusivePtr<Val>",        "%s",                             "%s",                             "",             "IntrusivePtr{AdoptRef{}, %s}",             "std::move(%s)")
